/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package game_of_life;

import java.util.ArrayList;
import java.util.Random;

import game_of_life.models.Cell;
import game_of_life.utils.Constants;
import game_of_life.utils.GameOfLife;
import javafx.scene.shape.Rectangle;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;

public class App extends Application {
    // Screen width
    private static final double WINDOW_WIDTH = 640;
    // Screen height
    private static final double WINDOW_HEIGHT = 480;
    // Rectangle size
    private static final double SIZE = 10;
    // Timeout variable this is how fast the animation will run
    private static final long TIMEOUT = 90_000_000;

    private ArrayList<ArrayList<Rectangle>> rects = new ArrayList<ArrayList<Rectangle>>();
    private ArrayList<ArrayList<Cell>> cells = new ArrayList<ArrayList<Cell>>();

    @Override
    public void start(Stage primaryStage) {
        GridPane grid = new GridPane();
        initCells();
        initRects(grid);
        Scene scene = new Scene(grid, WINDOW_WIDTH, WINDOW_HEIGHT);
        GameOfLife gol = new GameOfLife(cells);

        AnimationTimer timer = new AnimationTimer() {
            private long lastUpdate = 0;

            @Override
            public void handle(long now) {
                if (now - lastUpdate >= TIMEOUT) {
                    cells = gol.generate(cells);
                    display();
                    lastUpdate = now;
                }
            }
        };
        timer.start();

        // Clean up variables on exit
        primaryStage.setOnCloseRequest(new EventHandler<WindowEvent>() {
            @Override
            public void handle(WindowEvent t) {
                rects = null;
                cells = null;
                Platform.exit();
                System.exit(0);
            }
        });
        primaryStage.setTitle("Grid");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * Initialize the two dimensional Cell array
     */
    private void initCells() {
        Random rand = new Random();
        for (int i = 0; i < Constants.columns; i++) {
            ArrayList<Cell> newCells = new ArrayList<>();
            for (int j = 0; j < Constants.rows; j++) {
                newCells.add(new Cell(rand.nextInt(2)));
            }
            cells.add(newCells);
        }
    }

    /**
     * Initialize the two dimensional Rectangle array which is used for representing
     * the cells on the GUI
     */
    private void initRects(GridPane grid) {
        for (int i = 0; i < Constants.columns; i++) {
            ArrayList<Rectangle> _rects = new ArrayList<>();
            for (int j = 0; j < Constants.rows; j++) {
                Rectangle rectangle = new Rectangle(SIZE, SIZE, Color.YELLOW);
                _rects.add(rectangle);
                GridPane.setRowIndex(rectangle, i);
                GridPane.setColumnIndex(rectangle, j);
                grid.getChildren().addAll(rectangle);
            }
            rects.add(_rects);
        }
    }

    // Update the UI
    private void display() {
        Platform.runLater(() -> {
            for (int i = 0; i < Constants.columns; i++) {
                for (int j = 0; j < Constants.rows; j++) {
                    if ((cells.get(i).get(j).getState() == 1))
                        rects.get(i).get(j).setFill(Color.BLACK);
                    else
                        rects.get(i).get(j).setFill(Color.WHITE);

                }
            }
        });
    }

    public static void main(String[] args) {
        launch(args);
    }
}
